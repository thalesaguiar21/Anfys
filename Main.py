from random import random
from fuzzy.mem_funcs import BellTwo, PiecewiseLogit, BellThree
from speech.anfis import TsukamotoModel
import pprint

"""
# Reading input file
data_file = open('data.txt').read()
data_rows = data_file.split('\n')

INPUT_SIZE = int(data_rows[0])
LABELS = int(data_rows[1])
PRE_PARAMS_SIZE = 3

data = []

for line in range(len(data_rows) - 2):
    line = line + 2
    tmp_row = data_rows[line].split('\t')
    if tmp_row[-1] == '':
        del tmp_row[-1]
    for col in range(len(tmp_row)):
        tmp_row[col] = float(tmp_row[col])
    entry = tmp_row[:INPUT_SIZE]
    output = tmp_row[INPUT_SIZE:(INPUT_SIZE + (LABELS ** INPUT_SIZE))]
    data.append((entry, output))
if data[-1] == ([], []):
    del data[-1]
"""
data = [([0, 1], 1),
        ([0, 0], 0),
        ([1, 0], 1),
        ([1, 1], 0)]
# data = [([0.64220041154, -0.0479448990525, -0.563571794615, -1.38127637236,
#           0.571508065543, -2.42842934074, -3.64677269988, 0.907038322582,
#           1.88872596381, 0.203771293788, -0.0961014922242, -0.0207069325233,
#           0.912877926009], 31)]

sets_size = [3, 3]
# prec_params = [
#     [0.5810385287233912, 1.2868153860009148, 1.29578608372],
#     [1.3473850681828206, 0.8389800640658862, 0.119812931268],
#     [1.339900880732897, 0.09401431112042458, 0.15856952585],
#     [1.5922668716131554, 1.0868876078022072, 0.962786935246],
#     [1.8865873866422764, 0.22993741183044225, 1.32776144698],
#     [1.34072223255989, 1.5755485241834029, 1.47763039586]]
prec_params = [
    [0.5810385287233912, 1.2868153860009148],
    [1.3473850681828206, 0.8389800640658862],
    [1.339900880732897, 0.09401431112042458],
    [1.5922668716131554, 1.0868876078022072],
    [1.8865873866422764, 0.22993741183044225],
    [1.34072223255989, 1.5755485241834029]]
    # [1.47763039586, 1.29578608372],
    # [1.32773919238, 0.119812931268],
    # [1.32801874768, 0.15856952585],
    # [1.32776144698, 0.962786935246]]
"""
prec_params = [[0.346952378321, 1.25196582828],
               [0.573537269257, 0.530943776613],
               [1.44892407175, 1.52957482676],
               [1.68775768827, 0.724328090663],
               [0.256003297664, 0.845368142917],
               [1.66150488962, 0.729725713452],
               [0.367586732585, 0.210448756794],
               [0.575638941796, 0.0550909332716],
               [1.60538113778, 1.88591105533],
               [1.45226242061, 1.22653151126],
               [0.33953707429, 1.53230842779],
               [1.13851868546, 1.56413206441],
               [1.43000548739, 0.447687580078],
               [0.30322500861208157, 0.2812820982186859],
               [1.6679943109519089, 0.2810655820614285],
               [0.6260213090718232, 1.4304379205243474],
               [0.3629360958499468, 0.18786774185936506],
               [1.1959155518772253, 0.42391431681633374],
               [1.8794051276510388, 0.2914905066544162],
               [1.4565731390486567, 0.35141401294475494],
               [1.6846604682788167, 0.9620400900961261],
               [1.671864722992138, 0.22442560464194683],
               [1.5752854290626612, 1.687402005721617],
               [1.0046072292755326, 1.1688930810728229],
               [0.08963405885905296, 0.96306617881983],
               [0.13636231141167454, 0.13812302266706755]]
               # [1.389875770330362, 1.6347142917737418],
               # [1.0865122491238932, 1.5817691213724414],
               # [1.4050539633969732, 1.4710128669821356],
               # [1.3310991083793435, 0.7547873793950117],
               # [0.7036906114943073, 0.3604340464186835],
               # [1.2173238910248783, 1.941814144517288],
               # [0.2665558844445681, 0.6689292594785747],
               # [0.3663258820247002, 1.3930146629982658],
               # [1.121869441474214, 1.4248740314890203],
               # [1.023193900386842, 1.6311472537584821],
               # [0.21532007187106883, 1.5919132767385356],
               # [1.251664358044351, 0.9354501954896781],
               # [0.9779281413583731, 1.3778479385297169]]

"""

prec_fun = BellTwo()
con_fun = PiecewiseLogit()
network = TsukamotoModel(sets_size, prec_params, prec_fun, con_fun)
network.learn_hybrid_online(data, max_epochs=200)

"""
precedents = [
    FuzzySubset(
        LABELS,
        [[random() for i in range(PRE_PARAMS_SIZE)] for i in range(LABELS)],
                BellThree()
    ) for i in range(INPUT_SIZE)
]

consequents = [
    PiecewiseLogit() for i in range(LABELS ** INPUT_SIZE)
]

anfis = Anfis(precedents, consequents)
anfis.set_debug(False)
anfis.train_by_hybrid_online(5, 1e-8, data[:1]) """
